<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/application/usecase/ProductManagementUseCase.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/application/usecase/ProductManagementUseCase.java" />
              <option name="originalContent" value="package main.java.application.usecase;&#10;&#10;import main.java.domain.product.Product;&#10;import main.java.domain.repository.ProductRepository;&#10;import main.java.domain.shared.Code;&#10;import main.java.domain.shared.Money;&#10;&#10;import java.math.BigDecimal;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;public final class ProductManagementUseCase {&#10;    private final ProductRepository productRepository;&#10;    private final CategoryManagementUseCase categoryUseCase;&#10;&#10;    public ProductManagementUseCase(ProductRepository productRepository, CategoryManagementUseCase categoryUseCase) {&#10;        this.productRepository = productRepository;&#10;        this.categoryUseCase = categoryUseCase;&#10;    }&#10;&#10;    public static final class CreateProductRequest {&#10;        private final String code;&#10;        private final String name;&#10;        private final BigDecimal price;&#10;&#10;        public CreateProductRequest(String code, String name, BigDecimal price) {&#10;            this.code = code;&#10;            this.name = name;&#10;            this.price = price;&#10;        }&#10;&#10;        public String code() { return code; }&#10;        public String name() { return name; }&#10;        public BigDecimal price() { return price; }&#10;    }&#10;&#10;    public static final class CreateProductWithCategoryRequest {&#10;        private final String categoryCode;&#10;        private final String name;&#10;        private final BigDecimal price;&#10;&#10;        public CreateProductWithCategoryRequest(String categoryCode, String name, BigDecimal price) {&#10;            this.categoryCode = categoryCode;&#10;            this.name = name;&#10;            this.price = price;&#10;        }&#10;&#10;        public String categoryCode() { return categoryCode; }&#10;        public String name() { return name; }&#10;        public BigDecimal price() { return price; }&#10;    }&#10;&#10;    public static final class ProductInfo {&#10;        private final String code;&#10;        private final String name;&#10;        private final BigDecimal price;&#10;&#10;        public ProductInfo(Product product) {&#10;            this.code = product.code().value();&#10;            this.name = product.name();&#10;            this.price = product.price().amount();&#10;        }&#10;&#10;        public String code() { return code; }&#10;        public String name() { return name; }&#10;        public BigDecimal price() { return price; }&#10;    }&#10;&#10;    public enum CreateResult {&#10;        SUCCESS,&#10;        UPDATED&#10;    }&#10;&#10;    public enum DeleteResult {&#10;        SUCCESS,&#10;        NOT_FOUND&#10;    }&#10;&#10;    public CreateResult createProduct(CreateProductRequest request) {&#10;        validateCreateRequest(request);&#10;&#10;        Code code = new Code(request.code());&#10;        Optional&lt;Product&gt; existingProduct = productRepository.findByCode(code);&#10;&#10;        Product product = new Product(&#10;            code,&#10;            request.name(),&#10;            Money.of(request.price())&#10;        );&#10;&#10;        productRepository.upsert(product);&#10;&#10;        return existingProduct.isPresent() ? CreateResult.UPDATED : CreateResult.SUCCESS;&#10;    }&#10;&#10;    public CreateProductWithCategoryResult createProductWithCategory(CreateProductWithCategoryRequest request) {&#10;        validateCreateWithCategoryRequest(request);&#10;&#10;        // Generate product code automatically based on category&#10;        String generatedCode = categoryUseCase.generateProductCode(request.categoryCode());&#10;&#10;        Code code = new Code(generatedCode);&#10;        Product product = new Product(&#10;            code,&#10;            request.name(),&#10;            Money.of(request.price())&#10;        );&#10;&#10;        productRepository.upsert(product);&#10;&#10;        return new CreateProductWithCategoryResult(CreateResult.SUCCESS, generatedCode);&#10;    }&#10;&#10;    public Optional&lt;ProductInfo&gt; findProduct(String code) {&#10;        if (code == null || code.isBlank()) {&#10;            throw new IllegalArgumentException(&quot;Product code cannot be null or blank&quot;);&#10;        }&#10;&#10;        return productRepository.findByCode(new Code(code))&#10;            .map(ProductInfo::new);&#10;    }&#10;&#10;    public List&lt;ProductInfo&gt; listAllProducts() {&#10;        return productRepository.findAll()&#10;            .stream()&#10;            .map(ProductInfo::new)&#10;            .toList();&#10;    }&#10;&#10;    public DeleteResult deleteProduct(String code) {&#10;        if (code == null || code.isBlank()) {&#10;            throw new IllegalArgumentException(&quot;Product code cannot be null or blank&quot;);&#10;        }&#10;&#10;        boolean deleted = productRepository.deleteByCode(new Code(code));&#10;        return deleted ? DeleteResult.SUCCESS : DeleteResult.NOT_FOUND;&#10;    }&#10;&#10;    private void validateCreateRequest(CreateProductRequest request) {&#10;        if (request.code() == null || request.code().isBlank()) {&#10;            throw new IllegalArgumentException(&quot;Product code cannot be null or blank&quot;);&#10;        }&#10;        if (request.name() == null || request.name().isBlank()) {&#10;            throw new IllegalArgumentException(&quot;Product name cannot be null or blank&quot;);&#10;        }&#10;        if (request.price() == null || request.price().compareTo(BigDecimal.ZERO) &lt;= 0) {&#10;            throw new IllegalArgumentException(&quot;Product price must be positive&quot;);&#10;        }&#10;    }&#10;&#10;    private void validateCreateWithCategoryRequest(CreateProductWithCategoryRequest request) {&#10;        if (request.categoryCode() == null || request.categoryCode().isBlank()) {&#10;            throw new IllegalArgumentException(&quot;Category code cannot be null or blank&quot;);&#10;        }&#10;        if (request.name() == null || request.name().isBlank()) {&#10;            throw new IllegalArgumentException(&quot;Product name cannot be null or blank&quot;);&#10;        }&#10;        if (request.price() == null || request.price().compareTo(BigDecimal.ZERO) &lt;= 0) {&#10;            throw new IllegalArgumentException(&quot;Product price must be positive&quot;);&#10;        }&#10;    }&#10;&#10;    public static final class CreateProductWithCategoryResult {&#10;        private final CreateResult result;&#10;        private final String generatedCode;&#10;&#10;        public CreateProductWithCategoryResult(CreateResult result, String generatedCode) {&#10;            this.result = result;&#10;            this.generatedCode = generatedCode;&#10;        }&#10;&#10;        public CreateResult result() { return result; }&#10;        public String generatedCode() { return generatedCode; }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package main.java.application.usecase;&#10;&#10;import main.java.domain.product.Product;&#10;import main.java.domain.repository.ProductRepository;&#10;import main.java.domain.shared.Code;&#10;import main.java.domain.shared.Money;&#10;&#10;import java.math.BigDecimal;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;public final class ProductManagementUseCase {&#10;    private final ProductRepository productRepository;&#10;    private final CategoryManagementUseCase categoryUseCase;&#10;&#10;    public ProductManagementUseCase(ProductRepository productRepository, CategoryManagementUseCase categoryUseCase) {&#10;        this.productRepository = productRepository;&#10;        this.categoryUseCase = categoryUseCase;&#10;    }&#10;&#10;    public static final class CreateProductRequest {&#10;        private final String code;&#10;        private final String name;&#10;        private final BigDecimal price;&#10;&#10;        public CreateProductRequest(String code, String name, BigDecimal price) {&#10;            this.code = code;&#10;            this.name = name;&#10;            this.price = price;&#10;        }&#10;&#10;        public String code() { return code; }&#10;        public String name() { return name; }&#10;        public BigDecimal price() { return price; }&#10;    }&#10;&#10;    public static final class CreateProductWithCategoryRequest {&#10;        private final String categoryCode;&#10;        private final String name;&#10;        private final BigDecimal price;&#10;&#10;        public CreateProductWithCategoryRequest(String categoryCode, String name, BigDecimal price) {&#10;            this.categoryCode = categoryCode;&#10;            this.name = name;&#10;            this.price = price;&#10;        }&#10;&#10;        public String categoryCode() { return categoryCode; }&#10;        public String name() { return name; }&#10;        public BigDecimal price() { return price; }&#10;    }&#10;&#10;    public static final class ProductInfo {&#10;        private final String code;&#10;        private final String name;&#10;        private final BigDecimal price;&#10;&#10;        public ProductInfo(Product product) {&#10;            this.code = product.code().value();&#10;            this.name = product.name();&#10;            this.price = product.price().amount();&#10;        }&#10;&#10;        public String code() { return code; }&#10;        public String name() { return name; }&#10;        public BigDecimal price() { return price; }&#10;    }&#10;&#10;    public enum CreateResult {&#10;        SUCCESS,&#10;        UPDATED&#10;    }&#10;&#10;    public enum DeleteResult {&#10;        SUCCESS,&#10;        NOT_FOUND&#10;    }&#10;&#10;    public CreateResult createProduct(CreateProductRequest request) {&#10;        validateCreateRequest(request);&#10;&#10;        Code code = new Code(request.code());&#10;        Optional&lt;Product&gt; existingProduct = productRepository.findByCode(code);&#10;&#10;        Product product = new Product(&#10;            code,&#10;            request.name(),&#10;            Money.of(request.price())&#10;        );&#10;&#10;        productRepository.upsert(product);&#10;&#10;        return existingProduct.isPresent() ? CreateResult.UPDATED : CreateResult.SUCCESS;&#10;    }&#10;&#10;    public CreateProductWithCategoryResult createProductWithCategory(CreateProductWithCategoryRequest request) {&#10;        validateCreateWithCategoryRequest(request);&#10;&#10;        // Generate product code automatically based on category&#10;        String generatedCode = categoryUseCase.generateProductCode(request.categoryCode());&#10;&#10;        Code code = new Code(generatedCode);&#10;        Product product = new Product(&#10;            code,&#10;            request.name(),&#10;            Money.of(request.price()),&#10;            request.categoryCode()  // Pass the category code to the Product constructor&#10;        );&#10;&#10;        productRepository.upsert(product);&#10;&#10;        return new CreateProductWithCategoryResult(CreateResult.SUCCESS, generatedCode);&#10;    }&#10;&#10;    public Optional&lt;ProductInfo&gt; findProduct(String code) {&#10;        if (code == null || code.isBlank()) {&#10;            throw new IllegalArgumentException(&quot;Product code cannot be null or blank&quot;);&#10;        }&#10;&#10;        return productRepository.findByCode(new Code(code))&#10;            .map(ProductInfo::new);&#10;    }&#10;&#10;    public List&lt;ProductInfo&gt; listAllProducts() {&#10;        return productRepository.findAll()&#10;            .stream()&#10;            .map(ProductInfo::new)&#10;            .toList();&#10;    }&#10;&#10;    public DeleteResult deleteProduct(String code) {&#10;        if (code == null || code.isBlank()) {&#10;            throw new IllegalArgumentException(&quot;Product code cannot be null or blank&quot;);&#10;        }&#10;&#10;        boolean deleted = productRepository.deleteByCode(new Code(code));&#10;        return deleted ? DeleteResult.SUCCESS : DeleteResult.NOT_FOUND;&#10;    }&#10;&#10;    private void validateCreateRequest(CreateProductRequest request) {&#10;        if (request.code() == null || request.code().isBlank()) {&#10;            throw new IllegalArgumentException(&quot;Product code cannot be null or blank&quot;);&#10;        }&#10;        if (request.name() == null || request.name().isBlank()) {&#10;            throw new IllegalArgumentException(&quot;Product name cannot be null or blank&quot;);&#10;        }&#10;        if (request.price() == null || request.price().compareTo(BigDecimal.ZERO) &lt;= 0) {&#10;            throw new IllegalArgumentException(&quot;Product price must be positive&quot;);&#10;        }&#10;    }&#10;&#10;    private void validateCreateWithCategoryRequest(CreateProductWithCategoryRequest request) {&#10;        if (request.categoryCode() == null || request.categoryCode().isBlank()) {&#10;            throw new IllegalArgumentException(&quot;Category code cannot be null or blank&quot;);&#10;        }&#10;        if (request.name() == null || request.name().isBlank()) {&#10;            throw new IllegalArgumentException(&quot;Product name cannot be null or blank&quot;);&#10;        }&#10;        if (request.price() == null || request.price().compareTo(BigDecimal.ZERO) &lt;= 0) {&#10;            throw new IllegalArgumentException(&quot;Product price must be positive&quot;);&#10;        }&#10;    }&#10;&#10;    public static final class CreateProductWithCategoryResult {&#10;        private final CreateResult result;&#10;        private final String generatedCode;&#10;&#10;        public CreateProductWithCategoryResult(CreateResult result, String generatedCode) {&#10;            this.result = result;&#10;            this.generatedCode = generatedCode;&#10;        }&#10;&#10;        public CreateResult result() { return result; }&#10;        public String generatedCode() { return generatedCode; }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/domain/product/Product.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/domain/product/Product.java" />
              <option name="originalContent" value="package main.java.domain.product;&#10;&#10;import main.java.domain.shared.Code;&#10;import main.java.domain.shared.Money;&#10;&#10;public final class Product {&#10;    private final Code code;&#10;    private final String name;&#10;    private final Money price;&#10;&#10;    public Product(Code code, String name, Money price) {&#10;        if (name == null || name.isBlank()) throw new IllegalArgumentException(&quot;name is null or blank&quot;);&#10;        if (price == null) throw new IllegalArgumentException(&quot;price is null&quot;);&#10;        this.code = code;&#10;        this.name = name.trim();&#10;        this.price = price;&#10;    }&#10;&#10;    public Code code(){ return code; }&#10;    public String name(){ return name; }&#10;    public Money price(){ return price; }&#10;}&#10;" />
              <option name="updatedContent" value="package main.java.domain.product;&#10;&#10;import main.java.domain.shared.Code;&#10;import main.java.domain.shared.Money;&#10;&#10;public final class Product {&#10;    private final Code code;&#10;    private final String name;&#10;    private final Money price;&#10;    private final String categoryCode;&#10;&#10;    public Product(Code code, String name, Money price) {&#10;        this(code, name, price, null);&#10;    }&#10;&#10;    public Product(Code code, String name, Money price, String categoryCode) {&#10;        if (name == null || name.isBlank()) throw new IllegalArgumentException(&quot;name is null or blank&quot;);&#10;        if (price == null) throw new IllegalArgumentException(&quot;price is null&quot;);&#10;        this.code = code;&#10;        this.name = name.trim();&#10;        this.price = price;&#10;        this.categoryCode = categoryCode;&#10;    }&#10;&#10;    public Code code(){ return code; }&#10;    public String name(){ return name; }&#10;    public Money price(){ return price; }&#10;    public String categoryCode(){ return categoryCode; }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/infrastructure/persistence/JdbcProductRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/infrastructure/persistence/JdbcProductRepository.java" />
              <option name="originalContent" value="package main.java.infrastructure.persistence;&#10;&#10;import main.java.domain.product.Product;&#10;import main.java.domain.repository.ProductRepository;&#10;import main.java.domain.shared.Code;&#10;import main.java.domain.shared.Money;&#10;&#10;import javax.sql.DataSource;&#10;import java.sql.ResultSet;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;public final class JdbcProductRepository implements ProductRepository {&#10;    private final DataSource ds;&#10;    public JdbcProductRepository(DataSource ds){ this.ds = ds; }&#10;&#10;    @Override public void upsert(Product p) {&#10;        String sql = &quot;&quot;&quot;&#10;      INSERT INTO product(code,name,price_cents) VALUES(?,?,?)&#10;      ON DUPLICATE KEY UPDATE name=VALUES(name), price_cents=VALUES(price_cents)&#10;    &quot;&quot;&quot;;&#10;        try (var con = ds.getConnection(); var ps = con.prepareStatement(sql)) {&#10;            ps.setString(1, p.code().value());&#10;            ps.setString(2, p.name());&#10;            ps.setLong(3, p.price().amount().movePointRight(2).longValueExact());&#10;            ps.executeUpdate();&#10;        } catch (Exception e) { throw new RuntimeException(e); }&#10;    }&#10;&#10;    @Override public Optional&lt;Product&gt; findByCode(Code code) {&#10;        String sql = &quot;SELECT code,name,price_cents FROM product WHERE code=?&quot;;&#10;        try (var con = ds.getConnection(); var ps = con.prepareStatement(sql)) {&#10;            ps.setString(1, code.value());&#10;            try (ResultSet rs = ps.executeQuery()) {&#10;                if (!rs.next()) return Optional.empty();&#10;                var price = Money.of(rs.getLong(&quot;price_cents&quot;));&#10;                return Optional.of(new Product(new Code(rs.getString(&quot;code&quot;)), rs.getString(&quot;name&quot;), price));&#10;            }&#10;        } catch (Exception e) { throw new RuntimeException(e); }&#10;    }&#10;&#10;    @Override public List&lt;Product&gt; findAll() {&#10;        String sql = &quot;SELECT code,name,price_cents FROM product ORDER BY code&quot;;&#10;        List&lt;Product&gt; products = new ArrayList&lt;&gt;();&#10;        try (var con = ds.getConnection(); var ps = con.prepareStatement(sql)) {&#10;            try (ResultSet rs = ps.executeQuery()) {&#10;                while (rs.next()) {&#10;                    var price = Money.of(rs.getLong(&quot;price_cents&quot;));&#10;                    products.add(new Product(new Code(rs.getString(&quot;code&quot;)), rs.getString(&quot;name&quot;), price));&#10;                }&#10;            }&#10;        } catch (Exception e) { throw new RuntimeException(e); }&#10;        return products;&#10;    }&#10;&#10;    @Override public boolean deleteByCode(Code code) {&#10;        String sql = &quot;DELETE FROM product WHERE code=?&quot;;&#10;        try (var con = ds.getConnection(); var ps = con.prepareStatement(sql)) {&#10;            ps.setString(1, code.value());&#10;            return ps.executeUpdate() &gt; 0;&#10;        } catch (Exception e) { throw new RuntimeException(e); }&#10;    }&#10;}" />
              <option name="updatedContent" value="package main.java.infrastructure.persistence;&#10;&#10;import main.java.domain.product.Product;&#10;import main.java.domain.repository.ProductRepository;&#10;import main.java.domain.shared.Code;&#10;import main.java.domain.shared.Money;&#10;&#10;import javax.sql.DataSource;&#10;import java.sql.ResultSet;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;public final class JdbcProductRepository implements ProductRepository {&#10;    private final DataSource ds;&#10;    public JdbcProductRepository(DataSource ds){ this.ds = ds; }&#10;&#10;    @Override public void upsert(Product p) {&#10;        String sql = &quot;&quot;&quot;&#10;      INSERT INTO product(code,name,price_cents,category_code) VALUES(?,?,?,?)&#10;      ON DUPLICATE KEY UPDATE name=VALUES(name), price_cents=VALUES(price_cents), category_code=VALUES(category_code)&#10;    &quot;&quot;&quot;;&#10;        try (var con = ds.getConnection(); var ps = con.prepareStatement(sql)) {&#10;            ps.setString(1, p.code().value());&#10;            ps.setString(2, p.name());&#10;            ps.setLong(3, p.price().amount().movePointRight(2).longValueExact());&#10;            ps.setString(4, p.categoryCode());&#10;            ps.executeUpdate();&#10;        } catch (Exception e) { throw new RuntimeException(e); }&#10;    }&#10;&#10;    @Override public Optional&lt;Product&gt; findByCode(Code code) {&#10;        String sql = &quot;SELECT code,name,price_cents,category_code FROM product WHERE code=?&quot;;&#10;        try (var con = ds.getConnection(); var ps = con.prepareStatement(sql)) {&#10;            ps.setString(1, code.value());&#10;            try (ResultSet rs = ps.executeQuery()) {&#10;                if (!rs.next()) return Optional.empty();&#10;                var price = Money.of(rs.getLong(&quot;price_cents&quot;));&#10;                var categoryCode = rs.getString(&quot;category_code&quot;);&#10;                return Optional.of(new Product(new Code(rs.getString(&quot;code&quot;)), rs.getString(&quot;name&quot;), price, categoryCode));&#10;            }&#10;        } catch (Exception e) { throw new RuntimeException(e); }&#10;    }&#10;&#10;    @Override public List&lt;Product&gt; findAll() {&#10;        String sql = &quot;SELECT code,name,price_cents,category_code FROM product ORDER BY code&quot;;&#10;        List&lt;Product&gt; products = new ArrayList&lt;&gt;();&#10;        try (var con = ds.getConnection(); var ps = con.prepareStatement(sql)) {&#10;            try (ResultSet rs = ps.executeQuery()) {&#10;                while (rs.next()) {&#10;                    var price = Money.of(rs.getLong(&quot;price_cents&quot;));&#10;                    var categoryCode = rs.getString(&quot;category_code&quot;);&#10;                    products.add(new Product(new Code(rs.getString(&quot;code&quot;)), rs.getString(&quot;name&quot;), price, categoryCode));&#10;                }&#10;            }&#10;        } catch (Exception e) { throw new RuntimeException(e); }&#10;        return products;&#10;    }&#10;&#10;    @Override public boolean deleteByCode(Code code) {&#10;        String sql = &quot;DELETE FROM product WHERE code=?&quot;;&#10;        try (var con = ds.getConnection(); var ps = con.prepareStatement(sql)) {&#10;            ps.setString(1, code.value());&#10;            return ps.executeUpdate() &gt; 0;&#10;        } catch (Exception e) { throw new RuntimeException(e); }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>